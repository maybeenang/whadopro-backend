# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

# import notif_pb2 as notif__pb2

import rest_api.grpc_client.notif.notif_pb2 as notif__pb2


class NotifServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendNotif = channel.unary_unary(
            "/notif.NotifService/SendNotif",
            request_serializer=notif__pb2.SendNotifRequest.SerializeToString,
            response_deserializer=notif__pb2.SendNotifResponse.FromString,
        )
        self.GetNotifs = channel.unary_unary(
            "/notif.NotifService/GetNotifs",
            request_serializer=notif__pb2.GetNotifsRequest.SerializeToString,
            response_deserializer=notif__pb2.GetNotifsResponse.FromString,
        )
        self.DeleteNotif = channel.unary_unary(
            "/notif.NotifService/DeleteNotif",
            request_serializer=notif__pb2.DeleteNotifRequest.SerializeToString,
            response_deserializer=notif__pb2.DeleteNotifResponse.FromString,
        )


class NotifServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendNotif(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNotifs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteNotif(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_NotifServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendNotif": grpc.unary_unary_rpc_method_handler(
            servicer.SendNotif,
            request_deserializer=notif__pb2.SendNotifRequest.FromString,
            response_serializer=notif__pb2.SendNotifResponse.SerializeToString,
        ),
        "GetNotifs": grpc.unary_unary_rpc_method_handler(
            servicer.GetNotifs,
            request_deserializer=notif__pb2.GetNotifsRequest.FromString,
            response_serializer=notif__pb2.GetNotifsResponse.SerializeToString,
        ),
        "DeleteNotif": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteNotif,
            request_deserializer=notif__pb2.DeleteNotifRequest.FromString,
            response_serializer=notif__pb2.DeleteNotifResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "notif.NotifService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class NotifService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendNotif(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/notif.NotifService/SendNotif",
            notif__pb2.SendNotifRequest.SerializeToString,
            notif__pb2.SendNotifResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNotifs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/notif.NotifService/GetNotifs",
            notif__pb2.GetNotifsRequest.SerializeToString,
            notif__pb2.GetNotifsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteNotif(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/notif.NotifService/DeleteNotif",
            notif__pb2.DeleteNotifRequest.SerializeToString,
            notif__pb2.DeleteNotifResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
